# -*- coding: utf-8 -*-
### Setup fresh SQL table and import player data .csv file (export from google sheets)

### CSV Format ###
# Player IGN, Rank, Primary Role,Elo

# Required Imports
import os
from dotenv import load_dotenv
load_dotenv() # Loads .env variables
import csv

### Setup SQL ###
# If the database hasn't been created yet, run CREATE DATABASE inhouse
# In an SQL CLI tool (easiest way to do it)

import mysql.connector
from mysql.connector import Error
try:
    connection = mysql.connector.connect(host=os.getenv('SQL_URL'),
                                         database='inhouse',
                                         user=os.getenv('SQL_USER'),
                                         password=os.getenv('SQL_PWD'))
    if connection.is_connected():
        cursor = connection.cursor()
except Error as e:
    print("Error while connecting to MySQL", e)

### Create table ###
cursor.execute("""CREATE TABLE users (
    ign TEXT,
    id BIGINT,
    main_role ENUM('Top','Jungle','Mid','ADC','Support'),
    secondary_role ENUM('Top','Jungle','Mid','ADC','Support'),
    elo FLOAT(1),
    timeout INTEGER)
""")

users = []
player_csv = open('players.csv', newline='',encoding="utf-8") # File that contains stored player information
csvreader = csv.reader(player_csv)
header = next(csvreader) # Ignore the header of the csv (autogenerated from google sheets export)
for row in csvreader:
    if row[0] != "":
        users.append((row[0], 0, row[2], None, row[3], 0)) # Format the data for insertion
### Data format ###
# IGN, Discord id, Main Role, Secondary role, Ability to queue fill (?), elo (float), timeout (used for bans/timeouts)

user_insert_query = """
INSERT INTO users
(ign, id, main_role, secondary_role, elo, timeout)
VALUES ( %s, %s, %s, %s, %s, %s )
"""

with connection.cursor() as cursor:
    cursor.executemany(user_insert_query, users)
    connection.commit()