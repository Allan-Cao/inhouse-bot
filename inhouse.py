from turtle import update
import discord
import os
import datetime

### SQL Queries ###
user_insert_query = """
INSERT INTO users
(ign, id, main_role, secondary_role, elo, timeout)
VALUES ( %s, %s, %s, %s, %s, %s)
"""
ign_lookup_query = "SELECT * FROM users WHERE ign = %s"
id_lookup_query = "SELECT * FROM users WHERE id = %s"
update_discord_id_query = "UPDATE users SET id = %s WHERE ign = %s"
update_discord_id_query = "UPDATE users SET id = %s WHERE ign = %s"
update_secondary_role_by_id = "UPDATE users SET secondary_role = %s WHERE id = %s"

queue_lookup_ign_query = "SELECT * FROM queue WHERE id = %s"
queue_lookup_id_query = "SELECT * FROM queue WHERE id = %s"
remove_from_queue_id_query = "DELETE FROM queue WHERE id = %s"
remove_from_queue_ign_query = "DELETE FROM queue WHERE ign = %s"
reset_queue_query = "DELETE FROM queue;"
queue_row_count_query = "SELECT COUNT(1) FROM queue;"
queue_insert_query = """
INSERT INTO queue
(ign, id, primary_queue, secondary_role, elo)
VALUES ( %s, %s, %s, %s, %s)
"""
get_role_queue_query = "SELECT * FROM queue WHERE primary_queue = %s OR secondary_role = %s"
get_role_sorted_query = "SELECT * from queue WHERE primary_queue = %s ORDER BY created_at;"
### Setup SQL
import mysql.connector
from mysql.connector import Error

try:
    connection = mysql.connector.connect(host=os.getenv('SQL_URL'),
                                         database='inhouse', #CREATE DATABASE inhouse
                                         user=os.getenv('SQL_USER'),
                                         password=os.getenv('SQL_PWD'))
    if connection.is_connected():
        db_Info = connection.get_server_info()
        print("Connected to MySQL Server version ", db_Info)
        cursor = connection.cursor()
except Error as e:
    print("Error while connecting to MySQL", e)
def queue_is_open():
    return True
    # now = datetime.datetime.now()
    # if now.hour > 9 and now.hour < 22:
    #     return True
    # else:
    #     return False
def check_lobby_made():
    with connection.cursor() as cursor:
        lobby_users = []
        for role in ["Top", "Jungle", "Mid", "ADC", "Support"]:
            cursor.execute(get_role_sorted_query, (role,))
            myresult = cursor.fetchone()
            if len(myresult < 2):
                return False
            else:
                lobby_users.append([player[:5] for player in myresult[0:2]])
    print(lobby_users)
    return True
def remove_from_queue_id(id):
    with connection.cursor() as cursor:
        cursor.execute(remove_from_queue_id_query, (id,))
        connection.commit()
def join_queue_id(id):
    player_info = lookup_by_id(id)
    with connection.cursor() as cursor:
        cursor.execute(queue_insert_query, (player_info[:5]))
        connection.commit()
def lookup_queue_id(id):
    with connection.cursor() as cursor:
        cursor.execute(queue_lookup_id_query, (id,))
        myresult = cursor.fetchone()
    return myresult
def update_elo(id, elo_update):
    player_info = lookup_by_id(id)
    current_elo = player_info[4]
    updated_elo = current_elo + elo_update
    if updated_elo <= 600:
        return True
    if updated_elo >= 1500:
        return "Fill"
    elif updated_elo >= 1250:
        return "Secondary Role" 
def ping_user_by_id(id, ign):
    if id == 0:
        return ign
    else:
        return ("<@!" + str(id) + "> ")
def generate_queue_embed():
    if queue_is_open() == False:
        embed = discord.Embed(
            title=f"Amateur Inhouse Queue is currently CLOSED. It will reopen at 9 am EST.",
            color=discord.Colour.blurple(), # Pycord provides a class with default colors you can choose from
        )
        return embed
    with connection.cursor() as cursor:
        cursor.execute(queue_row_count_query)
        player_count = cursor.fetchone()[0]
    embed = discord.Embed(
        title=f"{player_count} player(s) currently in queue",
        description=f"Queue as of {format_time()}",
        color=discord.Colour.blurple(), # Pycord provides a class with default colors you can choose from
    )
    for role in ["Top","Jungle","Mid","ADC","Support","Fill"]:
        with connection.cursor() as cursor:
            cursor.execute(get_role_queue_query, (role, role,))
            myresult = cursor.fetchall()
        player_list = ""
        for player in myresult:
            ign, player_id, primary, secondary, elo, created_at = player
            if primary == role:
                player_list += (ping_user_by_id(player_id, ign) + ",")
            elif secondary == role:
                player_list += (ping_user_by_id(player_id, ign) + ",")
            else:
                raise ValueError
        if player_list == "":
            player_list = f"Nobody is queued for {role}"
        embed.add_field(name=role, value=f"{player_list}", inline=False)
    embed.set_footer(text="Queue information generated by Seraphine Bot") # footers can have icons too
    #embed.set_author(name="Pycord Team", icon_url="https://example.com/link-to-my-image.png")
    #embed.set_thumbnail(url="https://example.com/link-to-my-thumbnail.png")
    #embed.set_image(url="https://example.com/link-to-my-banner.png")
    return embed
def add_user(user):
    with connection.cursor() as cursor:
        cursor.executemany(user_insert_query, user)
        connection.commit()
def lookup_by_ign(ign):
    with connection.cursor() as cursor:
        cursor.execute(ign_lookup_query, (ign,))
        myresult = cursor.fetchone()
    return myresult
def change_secondary_role(new_role, id):
    with connection.cursor() as cursor:
        cursor.execute(update_secondary_role_by_id, (new_role, id,))
        connection.commit()
def lookup_by_id(id):
    with connection.cursor() as cursor:
        cursor.execute(id_lookup_query, (id,))
        myresult = cursor.fetchone()
    return myresult

def update_discord_id(id, ign):
    with connection.cursor() as cursor:
        cursor.execute(update_discord_id_query, (id, ign,))
        connection.commit()
def format_playercard_embed(player_information):

    name, discord_id, primary_role, second_role, elo, timeout = player_information

    embed = discord.Embed(
        title=f"{name} Player Data",
        color=discord.Colour.nitro_pink(), # Pycord provides a class with default colors you can choose from
    )
    embed.add_field(name="ELO", value=elo, inline=True)
    embed.add_field(name="Primary Role", value=primary_role, inline=True)
    embed.add_field(name="Secondary Role", value=second_role, inline=True)
    if elo > 1500:
        can_fill = "Yes!"
    else:
        can_fill = "Not yet."
    embed.add_field(name="Able to queue fill?", value=can_fill, inline=True)
    if discord_id == 0:
        linked_account = "Not linked"
    else:
        linked_account = f"<@!{discord_id}>"
    embed.add_field(name="Linked discord account", value=linked_account)
    embed.set_footer(text=f"Informated generated by Seraphine Bot at {format_time()}")
    return embed
def format_time():
    x = datetime.datetime.now()
    return x.strftime("%H:%M EST, %b %d %Y")
def stop_sql():
    with connection.cursor() as cursor:
        cursor.close()
        connection.close()
def reset_queue():
    with connection.cursor() as cursor:
        cursor.execute(reset_queue_query)
        connection.commit()