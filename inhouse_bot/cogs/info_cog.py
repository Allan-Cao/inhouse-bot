import discord
from discord.ext import commands
from inhouse_bot.db_system.db_helper import *
from inhouse_bot.utils.formatter import can_fill, format_time, ping_id


class info_cog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def format_playercard_embed(self, player_information):
        name, discord_id, primary_role, second_role, elo, timeout = player_information
        embed = discord.Embed(
            title=f"{name} Player Data",
            color=discord.Colour.nitro_pink(),
        )
        embed.add_field(name="ELO", value=elo, inline=True)
        embed.add_field(name="Primary Role", value=primary_role, inline=True)
        embed.add_field(name="Secondary Role", value=second_role, inline=True)

        embed.add_field(name="Able to queue fill?", value=can_fill(elo), inline=True)
        if discord_id == 0:
            linked_account = "Not linked"
        else:
            linked_account = ping_id(discord_id)
        embed.add_field(name="Linked discord account", value=linked_account)
        embed.set_footer(
            text=f"Informated generated by Seraphine Bot at {format_time()}"
        )
        return embed

    @commands.slash_command(name="profile", description="Your profile")
    async def profile(self, ctx: discord.ApplicationContext):
        discord_id = ctx.user.id
        player_info = lookup_by_id(discord_id)
        if player_info == None:
            await ctx.respond(
                f"Your user profile could not be found. Are you sure you are registered?"
            )
            return
        else:
            embed = self.format_playercard_embed(player_info)
            await ctx.respond(embed=embed)

    @commands.slash_command(name="search", description="Lookup user")
    async def search(self, ctx: discord.ApplicationContext, ign: str):
        player_info = lookup_by_ign(ign)
        if player_info == None:
            await ctx.respond(f"User with the IGN {ign} could not be found")
            return
        else:
            embed = self.format_playercard_embed(player_info)
            await ctx.respond(embed=embed)


def setup(bot):
    bot.add_cog(info_cog(bot))
